<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AreaGreaterThan0" xml:space="preserve">
    <value>Area must be a number greater than 0</value>
  </data>
  <data name="CannotChangeRealtorWithApartments" xml:space="preserve">
    <value>Cannot change realtor role as he currently manages some apartments</value>
  </data>
  <data name="CannotDeleteActiveRealtor" xml:space="preserve">
    <value>User cannot be deleted as he is a realtor to some apartments</value>
  </data>
  <data name="ConfirmPasswordMustMatchPassword" xml:space="preserve">
    <value>ConfirmPassword and Password do not match</value>
  </data>
  <data name="ConfirmPasswordRequired" xml:space="preserve">
    <value>Confirm password is required</value>
  </data>
  <data name="DescriptionRequired" xml:space="preserve">
    <value>Description is required</value>
  </data>
  <data name="EmailAlreadyExists" xml:space="preserve">
    <value>Email already exists</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="FirstNameOnlyLetters" xml:space="preserve">
    <value>First name must contain only letters</value>
  </data>
  <data name="FirstNameRequired" xml:space="preserve">
    <value>First name is required</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>Invalid email</value>
  </data>
  <data name="InvalidLatitude" xml:space="preserve">
    <value>Latitude must be a number between -90 and 90</value>
  </data>
  <data name="InvalidLogin" xml:space="preserve">
    <value>Invalid email or password</value>
  </data>
  <data name="InvalidLongitude" xml:space="preserve">
    <value>Longitude must be a number between -180 and 180</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Password must have minimum 8 characters and contain at least one uppercase letter, one lowercase letter and one digit</value>
  </data>
  <data name="InvalidRole" xml:space="preserve">
    <value>Invalid role id</value>
  </data>
  <data name="LastNameOnlyLetters" xml:space="preserve">
    <value>Last name must contain only letters</value>
  </data>
  <data name="LastNameRequired" xml:space="preserve">
    <value>Last name is required</value>
  </data>
  <data name="NrOfRoomsGreaterThan0" xml:space="preserve">
    <value>NrOfRooms must be a number greater than 0</value>
  </data>
  <data name="PasswordRequired" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="PasswordTokenExpired" xml:space="preserve">
    <value>Password reset has expired.</value>
  </data>
  <data name="PricePerMonthGreaterThan0" xml:space="preserve">
    <value>PricePerMonth must be a number greater than 0</value>
  </data>
  <data name="RealtorIdMandatory" xml:space="preserve">
    <value>Realtor is required</value>
  </data>
  <data name="RoleIdMandatory" xml:space="preserve">
    <value>Role is required</value>
  </data>
  <data name="TitleRequired" xml:space="preserve">
    <value>Title is required</value>
  </data>
</root>